{"version":3,"sources":["components/drawingPanel/pixel/Pixel.jsx","components/drawingPanel/row/Row.jsx","components/drawingPanel/DrawingPanel.jsx","components/editor/Editor.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["Pixel","props","selectedColor","useState","pixelColor","setPixelColor","oldColor","setOldColor","canChangeColor","setCanChangeColor","className","onClick","onMouseEnter","onMouseLeave","style","backgroundColor","Row","width","pixels","i","push","DrawingPanel","height","rows","id","Editor","panelWidth","setPanelWidth","panelHeight","setPanelHeight","hideOptions","setHideOptions","hideDrawingPanel","setHideDrawingPanel","buttonText","setButtonText","setColor","type","defaultValue","onChange","e","target","value","color","onChangeComplete","hex","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gSAGe,SAASA,EAAMC,GAAQ,IAC1BC,EAAkBD,EAAlBC,cADyB,EAGGC,mBAAS,QAHZ,mBAG1BC,EAH0B,KAGdC,EAHc,OAIDF,mBAASC,GAJR,mBAI1BE,EAJ0B,KAIhBC,EAJgB,OAKWJ,oBAAS,GALpB,mBAK1BK,EAL0B,KAKVC,EALU,KAyBjC,OACI,qBACIC,UAAU,QACVC,QArBR,WACIN,EAAcH,GACdO,GAAkB,IAoBdG,aAjBR,WACIL,EAAYH,GACZC,EAAcH,IAgBVW,aAbR,WACQL,GACAH,EAAcC,GAGlBG,GAAkB,IASdK,MAAO,CAAEC,gBAAiBX,K,OC9BvB,SAASY,EAAIf,GAKxB,IALgC,IACxBgB,EAAyBhB,EAAzBgB,MAAOf,EAAkBD,EAAlBC,cAEXgB,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAOE,IACvBD,EAAOE,KAAK,cAACpB,EAAD,CAAeE,cAAeA,GAAlBiB,IAG5B,OAAO,qBAAKT,UAAU,MAAf,SAAsBQ,ICTlB,SAASG,EAAapB,GAKjC,IALyC,IACjCgB,EAAiChB,EAAjCgB,MAAOK,EAA0BrB,EAA1BqB,OAAQpB,EAAkBD,EAAlBC,cAEnBqB,EAAO,GAEFJ,EAAI,EAAGA,EAAIG,EAAQH,IACxBI,EAAKH,KAAK,cAACJ,EAAD,CAAaC,MAAOA,EAAOf,cAAeA,GAAhCiB,IAGxB,OACI,qBAAKK,GAAG,eAAR,SACI,qBAAKA,GAAG,SAAR,SAAkBD,M,WC4DfE,EAtEA,WAAO,IAAD,EACmBtB,mBAAS,IAD5B,mBACVuB,EADU,KACEC,EADF,OAEqBxB,mBAAS,IAF9B,mBAEVyB,EAFU,KAEGC,EAFH,OAGqB1B,oBAAS,GAH9B,mBAGV2B,EAHU,KAGGC,EAHH,OAI+B5B,oBAAS,GAJxC,mBAIV6B,EAJU,KAIQC,EAJR,OAKmB9B,mBAAS,iBAL5B,mBAKV+B,EALU,KAKEC,EALF,OAMiBhC,mBAAS,WAN1B,mBAMVD,EANU,KAMKkC,EANL,KAqBjB,OACI,sBAAKZ,GAAG,SAAR,UACI,8CACCQ,GAAoB,wDACpBA,GACG,sBAAKR,GAAG,UAAR,UACI,sBAAKd,UAAU,SAAf,UACI,uBACI2B,KAAK,SACL3B,UAAU,aACV4B,aAAcZ,EACda,SAAU,SAAAC,GACNb,EAAca,EAAEC,OAAOC,UAG/B,4CAEJ,sBAAKhC,UAAU,SAAf,UACI,uBACI2B,KAAK,SACL3B,UAAU,aACV4B,aAAcV,EACdW,SAAU,SAAAC,GACNX,EAAeW,EAAEC,OAAOC,UAGhC,gDAIZ,wBAAQ/B,QA3ChB,WACIoB,GAAgBD,GAChBG,GAAqBD,GAGfG,EADS,kBAAfD,EACoB,QACA,kBAqCyBxB,UAAU,SAAnD,SACKwB,IAGDJ,GACI,cAACT,EAAD,CACIJ,MAAOS,EACPJ,OAAQM,EACR1B,cAAeA,IAI1B4B,GACG,cAAC,IAAD,CAAca,MAAOzC,EAAe0C,iBA/ChD,SAAqBD,GACjBP,EAASO,EAAME,YCZRC,G,OARH,WACV,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,QCMSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.dd3e4a19.chunk.js","sourcesContent":["import React, { useState } from \"react\"\r\nimport \"./pixel.scss\";\r\n\r\nexport default function Pixel(props) {\r\n    const { selectedColor } = props\r\n\r\n    const [pixelColor, setPixelColor] = useState(\"#fff\");\r\n    const [oldColor, setOldColor] = useState(pixelColor);\r\n    const [canChangeColor, setCanChangeColor] = useState(true);\r\n\r\n    function applyColor() {\r\n        setPixelColor(selectedColor);\r\n        setCanChangeColor(false);\r\n    }\r\n\r\n    function changeColorOnHover() {\r\n        setOldColor(pixelColor);\r\n        setPixelColor(selectedColor);\r\n    }\r\n\r\n    function resetColor() {\r\n        if (canChangeColor) {\r\n            setPixelColor(oldColor)\r\n        }\r\n\r\n        setCanChangeColor(true)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"pixel\"\r\n            onClick={applyColor}\r\n            onMouseEnter={changeColorOnHover}\r\n            onMouseLeave={resetColor}\r\n            style={{ backgroundColor: pixelColor }}\r\n        />\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport Pixel from \"../pixel/Pixel\";\r\nimport \"./row.scss\"\r\n\r\nexport default function Row(props) {\r\n    const { width, selectedColor } = props\r\n\r\n    let pixels = []\r\n\r\n    for (let i = 0; i < width; i++) {\r\n        pixels.push(<Pixel key={i} selectedColor={selectedColor} />)\r\n    }\r\n\r\n    return <div className=\"row\">{pixels}</div>\r\n}\r\n","import React, { useRef } from \"react\";\r\nimport \"./drawingPanel.scss\";\r\nimport Row from \"./row/Row\";\r\n\r\nexport default function DrawingPanel(props) {\r\n    const { width, height, selectedColor } = props\r\n\r\n    let rows = []\r\n\r\n    for (let i = 0; i < height; i++) {\r\n        rows.push(<Row key={i} width={width} selectedColor={selectedColor} />)\r\n    }\r\n\r\n    return (\r\n        <div id=\"drawingPanel\">\r\n            <div id=\"pixels\">{rows}</div>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport {CirclePicker} from \"react-color\";\r\nimport DrawingPanel from \"../drawingPanel/DrawingPanel\";\r\nimport './editor.scss';\r\n\r\nconst Editor = () => {\r\n    const [panelWidth, setPanelWidth] = useState(16)\r\n    const [panelHeight, setPanelHeight] = useState(16)\r\n    const [hideOptions, setHideOptions] = useState(false)\r\n    const [hideDrawingPanel, setHideDrawingPanel] = useState(true)\r\n    const [buttonText, setButtonText] = useState(\"start drawing\")\r\n    const [selectedColor, setColor] = useState(\"#f44336\")\r\n\r\n    function initializeDrawingPanel() {\r\n        setHideOptions(!hideOptions)\r\n        setHideDrawingPanel(!hideDrawingPanel)\r\n\r\n        buttonText === \"start drawing\"\r\n            ? setButtonText(\"reset\")\r\n            : setButtonText(\"start drawing\")\r\n    }\r\n\r\n    function changeColor(color) {\r\n        setColor(color.hex)\r\n    }\r\n\r\n    return (\r\n        <div id=\"editor\">\r\n            <h1>Pixel Editor</h1>\r\n            {hideDrawingPanel && <h2>Enter Panel Dimensions</h2>}\r\n            {hideDrawingPanel && (\r\n                <div id=\"options\">\r\n                    <div className=\"option\">\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"panelInput\"\r\n                            defaultValue={panelWidth}\r\n                            onChange={e => {\r\n                                setPanelWidth(e.target.value)\r\n                            }}\r\n                        />\r\n                        <span>Width</span>\r\n                    </div>\r\n                    <div className=\"option\">\r\n                        <input\r\n                            type=\"number\"\r\n                            className=\"panelInput\"\r\n                            defaultValue={panelHeight}\r\n                            onChange={e => {\r\n                                setPanelHeight(e.target.value)\r\n                            }}\r\n                        />\r\n                        <span>Height</span>\r\n                    </div>\r\n                </div>\r\n            )}\r\n            <button onClick={initializeDrawingPanel} className=\"button\">\r\n                {buttonText}\r\n            </button>\r\n            {\r\n                hideOptions && (\r\n                    <DrawingPanel\r\n                        width={panelWidth}\r\n                        height={panelHeight}\r\n                        selectedColor={selectedColor}\r\n                    />\r\n                )\r\n            }\r\n            {hideOptions && (\r\n                <CirclePicker color={selectedColor} onChangeComplete={changeColor} />\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Editor;\r\n","import Editor from './editor/Editor';\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Editor />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}